import { useState, useMemo } from 'react';


export default function FlexiblePTBooking() {
  const [currentDate, setCurrentDate] = useState(new Date());
  const [viewMode, setViewMode] = useState('day');
  const [showBookingModal, setShowBookingModal] = useState(false);
  const [selectedSlot, setSelectedSlot] = useState(null);
  const [showSessionActions, setShowSessionActions] = useState(false);
  const [selectedSession, setSelectedSession] = useState(null);
  const [searchClient, setSearchClient] = useState('');
  const [showWorkoutSelector, setShowWorkoutSelector] = useState(false);
  const [showTimeCustomizer, setShowTimeCustomizer] = useState(false);
  const [customTime, setCustomTime] = useState({ hour: 7, minute: 0 });
  const [selectedServiceType, setSelectedServiceType] = useState(null);
  
  // Studio-defined service types (would come from owner dashboard)
  const [serviceTypes] = useState([
    { id: 1, name: '1-on-1 PT Session', duration: 30, color: '#12229D', creditsRequired: 1 },
    { id: 2, name: 'Extended PT Session', duration: 60, color: '#A71075', creditsRequired: 2 },
    { id: 3, name: 'Couples Training', duration: 45, color: '#AB1D79', creditsRequired: 1.5 },
    { id: 4, name: 'Power Session', duration: 75, color: '#F4B324', creditsRequired: 2.5 },
    { id: 5, name: 'Elite Training', duration: 90, color: '#12229D', creditsRequired: 3 },
  ]);
  
  const [clients, setClients] = useState([
    { id: 1, name: 'Sarah Mitchell', avatar: '👩', color: '#A71075', credits: 8, phone: '07700900123' },
    { id: 2, name: 'James Wilson', avatar: '👨', color: '#12229D', credits: 5, phone: '07700900456' },
    { id: 3, name: 'Emma Thompson', avatar: '👩‍🦰', color: '#AB1D79', credits: 12, phone: '07700900789' },
    { id: 4, name: 'Michael Chen', avatar: '👨‍🦱', color: '#12229D', credits: 4, phone: '07700900321' },
    { id: 5, name: 'Lisa Anderson', avatar: '👱‍♀️', color: '#F4B324', credits: 3, phone: '07700900654' },
    { id: 6, name: 'David Brown', avatar: '🧔', color: '#A71075', credits: 0, phone: '07700900987' },
  ]);
  
  const [workoutTemplates] = useState([
    { id: 1, name: 'Full Body Strength', exercises: ['Squats', 'Push-ups', 'Rows', 'Lunges'] },
    { id: 2, name: 'Upper Body Focus', exercises: ['Bench Press', 'Pull-ups', 'Shoulder Press'] },
    { id: 3, name: 'Lower Body Power', exercises: ['Deadlifts', 'Leg Press', 'Calf Raises'] },
    { id: 4, name: 'Core & Cardio', exercises: ['Planks', 'Mountain Climbers', 'Burpees'] },
    { id: 5, name: 'HIIT Circuit', exercises: ['Jump Squats', 'Push-ups', 'High Knees'] },
  ]);
  
  const [sessions, setSessions] = useState([
    { id: 1, datetime: new Date(2025, 9, 22, 7, 0), clientId: 1, status: 'confirmed', serviceTypeId: 1, workoutId: null },
    { id: 2, datetime: new Date(2025, 9, 22, 8, 15), clientId: 3, status: 'confirmed', serviceTypeId: 1, workoutId: 1 },
    { id: 3, datetime: new Date(2025, 9, 22, 10, 0), clientId: 2, status: 'soft-hold', serviceTypeId: 2, holdExpiry: new Date(Date.now() + 23 * 60 * 60 * 1000) },
    { id: 4, datetime: new Date(2025, 9, 23, 7, 0), clientId: 4, status: 'checked-in', serviceTypeId: 3, workoutId: 2 },
    { id: 5, datetime: new Date(2025, 9, 23, 9, 30), clientId: 5, status: 'soft-hold', serviceTypeId: 1, holdExpiry: new Date(Date.now() + 4 * 60 * 60 * 1000) },
    { id: 6, datetime: new Date(2025, 9, 23, 16, 0), clientId: 1, status: 'confirmed', serviceTypeId: 4 },
    { id: 7, datetime: new Date(2025, 9, 24, 7, 30), clientId: 6, status: 'confirmed', serviceTypeId: 1, workoutId: 5 },
    { id: 8, datetime: new Date(2025, 9, 24, 15, 0), clientId: 3, status: 'confirmed', serviceTypeId: 5 },
    { id: 9, datetime: new Date(2025, 9, 25, 8, 0), clientId: 4, status: 'confirmed', serviceTypeId: 2 },
  ]);
  
  const weekDays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
  const hours = Array.from({ length: 15 }, (_, i) => i + 6);
  
  const getServiceType = (serviceTypeId) => {
    return serviceTypes.find(s => s.id === serviceTypeId);
  };
  
  const getSessionDuration = (session) => {
    const serviceType = getServiceType(session.serviceTypeId);
    return serviceType ? serviceType.duration : 30;
  };
  
  const getWeekDates = () => {
    const startOfWeek = new Date(currentDate);
    startOfWeek.setDate(currentDate.getDate() - currentDate.getDay());
    startOfWeek.setHours(0, 0, 0, 0);
    return Array.from({ length: 7 }, (_, i) => {
      const date = new Date(startOfWeek);
      date.setDate(startOfWeek.getDate() + i);
      return date;
    });
  };
  
  const weekDates = getWeekDates();
  
  const formatDate = (date) => {
    return date.toLocaleDateString('en-GB', { weekday: 'long', day: 'numeric', month: 'short' });
  };
  
  const formatTime = (date) => {
    return date.toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit', hour12: false });
  };
  
  const getWeekRange = () => {
    const dates = getWeekDates();
    const start = dates[0];
    const end = dates[6];
    return `${start.getDate()} - ${end.getDate()} ${start.toLocaleString('default', { month: 'short' })}, ${start.getFullYear()}`;
  };
  
  const getTimeRemaining = (expiry) => {
    const now = new Date();
    const diff = expiry - now;
    const hours = Math.floor(diff / (1000 * 60 * 60));
    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
    if (hours > 0) return `${hours}h ${minutes}m`;
    return `${minutes}m`;
  };
  
  const navigateWeek = (direction) => {
    const newDate = new Date(currentDate);
    if (viewMode === 'day') {
      newDate.setDate(currentDate.getDate() + direction);
    } else {
      newDate.setDate(currentDate.getDate() + (direction * 7));
    }
    setCurrentDate(newDate);
  };
  
  const goToToday = () => setCurrentDate(new Date());
  
  // Check if time slot conflicts with existing sessions
  const isTimeAvailable = (datetime, durationMinutes, excludeSessionId = null) => {
    const proposedEnd = new Date(datetime.getTime() + durationMinutes * 60000);
    
    return !sessions.some(s => {
      if (excludeSessionId && s.id === excludeSessionId) return false;
      
      const sessionDuration = getSessionDuration(s);
      const sessionEnd = new Date(s.datetime.getTime() + sessionDuration * 60000);
      
      // Check for overlap
      return (datetime < sessionEnd && proposedEnd > s.datetime);
    });
  };
  
  const handleQuickTimeSlotClick = (baseTime) => {
    const datetime = new Date(baseTime);
    setCustomTime({ hour: datetime.getHours(), minute: datetime.getMinutes() });
    setSelectedSlot(datetime);
    setShowBookingModal(true);
    setSearchClient('');
    setSelectedServiceType(serviceTypes[0]); // Default to first service type
  };
  
  const handleCustomTimeClick = () => {
    setShowTimeCustomizer(true);
  };
  
  const applyCustomTime = () => {
    const datetime = new Date(selectedSlot || currentDate);
    datetime.setHours(customTime.hour, customTime.minute, 0, 0);
    setSelectedSlot(datetime);
    setShowTimeCustomizer(false);
  };
  
  const handleSessionClick = (session) => {
    setSelectedSession(session);
    setShowSessionActions(true);
  };
  
  const bookSession = (client, isSoftHold = false) => {
    if (!selectedSlot || !selectedServiceType) return;
    
    const serviceType = selectedServiceType;
    const requiredCredits = serviceType.creditsRequired;
    
    if (!isSoftHold && client.credits < requiredCredits) {
      alert(`Client needs ${requiredCredits} credits for this session type`);
      return;
    }
    
    if (!isTimeAvailable(selectedSlot, serviceType.duration)) {
      alert('This time slot conflicts with an existing session');
      return;
    }
    
    const newSession = {
      id: Date.now(),
      datetime: new Date(selectedSlot),
      clientId: client.id,
      status: isSoftHold ? 'soft-hold' : 'confirmed',
      serviceTypeId: serviceType.id,
      holdExpiry: isSoftHold ? new Date(Date.now() + 24 * 60 * 60 * 1000) : null,
      workoutId: null
    };
    
    if (!isSoftHold) {
      setClients(clients.map(c => 
        c.id === client.id ? { ...c, credits: c.credits - requiredCredits } : c
      ));
    }
    
    setSessions([...sessions, newSession]);
    setShowBookingModal(false);
    setSelectedSlot(null);
    setSelectedServiceType(null);
  };
  
  const startSession = (workoutId) => {
    const client = clients.find(c => c.id === selectedSession.clientId);
    const serviceType = getServiceType(selectedSession.serviceTypeId);
    
    if (selectedSession.status === 'soft-hold') {
      if (!client || client.credits < serviceType.creditsRequired) {
        alert(`Client needs ${serviceType.creditsRequired} credits to start this session`);
        return;
      }
      setClients(clients.map(c => 
        c.id === client.id ? { ...c, credits: c.credits - serviceType.creditsRequired } : c
      ));
    }
    
    setSessions(sessions.map(s => 
      s.id === selectedSession.id ? { ...s, status: 'checked-in', workoutId } : s
    ));
    setShowWorkoutSelector(false);
    setShowSessionActions(false);
  };
  
  const markNoShow = () => {
    const session = sessions.find(s => s.id === selectedSession.id);
    const client = clients.find(c => c.id === session.clientId);
    const serviceType = getServiceType(session.serviceTypeId);
    
    if (session.status === 'confirmed' && client && serviceType) {
      setClients(clients.map(c => 
        c.id === client.id ? { ...c, credits: c.credits + serviceType.creditsRequired } : c
      ));
    }
    
    setSessions(sessions.map(s => 
      s.id === selectedSession.id ? { ...s, status: 'no-show' } : s
    ));
    setShowSessionActions(false);
  };
  
  const markLate = () => {
    setSessions(sessions.map(s => 
      s.id === selectedSession.id ? { ...s, status: 'late' } : s
    ));
  };
  
  const cancelSession = () => {
    const session = sessions.find(s => s.id === selectedSession.id);
    const client = clients.find(c => c.id === session.clientId);
    const serviceType = getServiceType(session.serviceTypeId);
    
    if (session.status === 'confirmed' && client && serviceType) {
      setClients(clients.map(c => 
        c.id === client.id ? { ...c, credits: c.credits + serviceType.creditsRequired } : c
      ));
    }
    
    setSessions(sessions.filter(s => s.id !== selectedSession.id));
    setShowSessionActions(false);
  };
  
  const getTodaySessions = () => {
    const today = new Date(currentDate);
    today.setHours(0, 0, 0, 0);
    const tomorrow = new Date(today);
    tomorrow.setDate(tomorrow.getDate() + 1);
    
    return sessions
      .filter(s => s.datetime >= today && s.datetime < tomorrow)
      .sort((a, b) => a.datetime - b.datetime);
  };
  
  const getStatusBadge = (status) => {
    switch(status) {
      case 'soft-hold': return { bg: '#FFF3E0', text: '#F4B324', label: 'Soft Hold' };
      case 'confirmed': return { bg: '#E8F5E9', text: '#4CAF50', label: 'Confirmed' };
      case 'checked-in': return { bg: '#E3F2FD', text: '#2196F3', label: 'In Session' };
      case 'no-show': return { bg: '#FFEBEE', text: '#F44336', label: 'No Show' };
      case 'late': return { bg: '#FFF9C4', text: '#F57C00', label: 'Late' };
      default: return { bg: '#F5F5F5', text: '#9E9E9E', label: status };
    }
  };
  
  const filteredClients = clients.filter(c => 
    c.name.toLowerCase().includes(searchClient.toLowerCase())
  );
  
  const todaysSessions = getTodaySessions();
  
  // Calculate position and height for sessions in grid
  const getSessionGridPosition = (session, dayIndex) => {
    const sessionDate = new Date(session.datetime);
    if (sessionDate.getDay() !== dayIndex) return null;
    
    const startHour = sessionDate.getHours();
    const startMinute = sessionDate.getMinutes();
    const duration = getSessionDuration(session);
    
    // Calculate position within hour blocks
    const hoursSinceStart = startHour - 6; // 6am is start
    const minuteOffset = startMinute;
    const topPosition = (hoursSinceStart * 60 + minuteOffset) * 2; // 2px per minute in 15min intervals
    
    const heightPixels = duration * 2; // 2px per minute
    
    return { top: topPosition, height: heightPixels };
  };
  
  return (
    <div className="bg-gray-50 min-h-screen max-w-md mx-auto pb-20 font-sans">
      {/* Header */}
      <div style={{ background: 'linear-gradient(135deg, #12229D 0%, #A71075 100%)' }} 
        className="text-white p-4 sticky top-0 z-50 shadow-lg">
        <div className="flex items-center justify-between mb-2">
          <div className="flex items-center gap-3">
            <div className="w-11 h-11 rounded-full bg-white bg-opacity-20 flex items-center justify-center text-xl">
              💪
            </div>
            <div>
              <div className="font-bold text-base">Brett Waldock</div>
              <div className="text-xs opacity-90">Personal Trainer</div>
            </div>
          </div>
          <button className="bg-white bg-opacity-20 w-9 h-9 rounded-full flex items-center justify-center text-sm">
            🔔
          </button>
        </div>
      </div>
      
      {/* View Toggle & Navigation */}
      <div className="p-3 bg-white border-b sticky top-[68px] z-40 shadow-sm">
        <div className="flex items-center justify-between mb-3">
          <div className="flex gap-2">
            <button onClick={() => navigateWeek(-1)} 
              style={{ background: '#F5F5F5', color: '#272030' }}
              className="w-9 h-9 rounded-lg hover:opacity-80 flex items-center justify-center font-bold text-sm">
              ←
            </button>
            <button onClick={() => navigateWeek(1)} 
              style={{ background: '#F5F5F5', color: '#272030' }}
              className="w-9 h-9 rounded-lg hover:opacity-80 flex items-center justify-center font-bold text-sm">
              →
            </button>
            <button onClick={goToToday} 
              style={{ background: '#F5F5F5', color: '#272030' }}
              className="px-3 h-9 rounded-lg text-xs font-semibold hover:opacity-80">
              Today
            </button>
          </div>
          <div className="font-bold text-sm" style={{ color: '#272030' }}>
            {viewMode === 'day' ? formatDate(currentDate) : getWeekRange()}
          </div>
        </div>
        
        <div className="flex gap-2">
          <button 
            onClick={() => setViewMode('day')}
            style={{
              background: viewMode === 'day' ? '#12229D' : '#F5F5F5',
              color: viewMode === 'day' ? 'white' : '#272030'
            }}
            className="flex-1 py-2 rounded-lg text-xs font-semibold transition-colors">
            Day View
          </button>
          <button 
            onClick={() => setViewMode('week')}
            style={{
              background: viewMode === 'week' ? '#12229D' : '#F5F5F5',
              color: viewMode === 'week' ? 'white' : '#272030'
            }}
            className="flex-1 py-2 rounded-lg text-xs font-semibold transition-colors">
            Week View
          </button>
        </div>
      </div>
      
      {/* Day View */}
      {viewMode === 'day' && (
        <div className="p-3">
          {/* Session List */}
          <div className="space-y-2 mb-4">
            {todaysSessions.length === 0 ? (
              <div className="bg-white rounded-xl p-8 text-center text-gray-500">
                <div className="text-4xl mb-2">📅</div>
                <div className="text-sm font-medium">No sessions today</div>
              </div>
            ) : (
              todaysSessions.map(session => {
                const client = clients.find(c => c.id === session.clientId);
                const statusInfo = getStatusBadge(session.status);
                const serviceType = getServiceType(session.serviceTypeId);
                const workout = workoutTemplates.find(w => w.id === session.workoutId);
                
                return (
                  <div key={session.id}
                    onClick={() => handleSessionClick(session)}
                    className="bg-white rounded-xl p-4 shadow-sm border-2 hover:shadow-md cursor-pointer transition-all"
                    style={{ borderColor: '#D7D7DB' }}>
                    <div className="flex items-center gap-3 mb-3">
                      <div style={{ background: client?.color || '#12229D' }} 
                        className="w-14 h-14 rounded-full flex items-center justify-center text-2xl flex-shrink-0 shadow-sm">
                        {client?.avatar}
                      </div>
                      <div className="flex-1 min-w-0">
                        <div className="font-bold text-base" style={{ color: '#272030' }}>
                          {clients.find(c => c.id === session.clientId)?.name}
                        </div>
                        <div className="text-sm text-gray-600">{formatTime(session.datetime)}</div>
                      </div>
                      <div className="text-right">
                        <div className="text-2xl font-bold text-gray-400">
                          {session.datetime.getHours()}:{session.datetime.getMinutes().toString().padStart(2, '0')}
                        </div>
                        <div className="text-xs text-gray-500">{serviceType?.duration}m</div>
                      </div>
                    </div>
                    
                    <div className="flex items-center gap-2 flex-wrap">
                      <span style={{ background: statusInfo.bg, color: statusInfo.text }}
                        className="px-2.5 py-1 rounded-full text-xs font-semibold">
                        {statusInfo.label}
                      </span>
                      <span style={{ background: '#E8EAF6', color: '#12229D' }}
                        className="px-2.5 py-1 rounded-full text-xs font-semibold">
                        {serviceType?.name}
                      </span>
                      {session.status === 'soft-hold' && session.holdExpiry && (
                        <span style={{ background: '#FFF3E0', color: '#F4B324' }}
                          className="px-2.5 py-1 rounded-full text-xs font-medium">
                          ⏱ {getTimeRemaining(session.holdExpiry)}
                        </span>
                      )}
                      {client && (
                        <span className={client.credits >= (serviceType?.creditsRequired || 1) 
                          ? 'bg-green-50 text-green-600' 
                          : 'bg-red-50 text-red-600'}
                          style={{ fontSize: '11px' }}
                          className="px-2.5 py-1 rounded-full font-medium">
                          {client.credits} credits
                        </span>
                      )}
                      {workout && (
                        <span style={{ background: '#E8F5E9', color: '#4CAF50' }}
                          className="px-2.5 py-1 rounded-full text-xs font-medium">
                          📋 {workout.name}
                        </span>
                      )}
                    </div>
                  </div>
                );
              })
            )}
          </div>
          
          {/* Quick Time Selector */}
          <div className="bg-white rounded-xl p-3 shadow-sm">
            <div className="text-xs font-semibold mb-2" style={{ color: '#272030' }}>
              Quick Book Time
            </div>
            <div className="grid grid-cols-4 gap-2 mb-2">
              {hours.slice(0, 12).map(hour => {
                const datetime = new Date(currentDate);
                datetime.setHours(hour, 0, 0, 0);
                const hasConflict = !isTimeAvailable(datetime, 30);
                
                return (
                  <button key={hour}
                    onClick={() => !hasConflict && handleQuickTimeSlotClick(datetime)}
                    disabled={hasConflict}
                    style={{
                      background: hasConflict ? '#F5F5F5' : '#FFFFFF',
                      borderColor: hasConflict ? '#D7D7DB' : '#12229D',
                      color: hasConflict ? '#9E9E9E' : '#12229D',
                      opacity: hasConflict ? 0.5 : 1
                    }}
                    className="border-2 rounded-lg p-2 text-xs font-semibold hover:opacity-80 transition-colors">
                    {hour}:00
                  </button>
                );
              })}
            </div>
            <button 
              onClick={() => {
                const now = new Date(currentDate);
                now.setHours(9, 0, 0, 0);
                setSelectedSlot(now);
                setCustomTime({ hour: 9, minute: 0 });
                handleCustomTimeClick();
              }}
              style={{ background: '#F4B324', color: '#272030' }}
              className="w-full p-2 rounded-lg text-xs font-semibold hover:opacity-90">
              ⏰ Custom Time
            </button>
          </div>
        </div>
      )}
      
      {/* Week View - Enhanced for variable durations */}
      {viewMode === 'week' && (
        <div className="overflow-x-auto bg-white">
          <div className="min-w-[800px] p-3">
            {/* Day Headers */}
            <div style={{ display: 'grid', gridTemplateColumns: '50px repeat(7, 1fr)', gap: '4px' }} className="mb-2">
              <div />
              {weekDates.map((date, i) => (
                <div key={i} 
                  style={{
                    background: date.toDateString() === currentDate.toDateString() ? '#12229D' : '#F5F5F5',
                    color: date.toDateString() === currentDate.toDateString() ? 'white' : '#272030'
                  }}
                  className="text-center p-2 rounded-lg text-xs font-bold">
                  <div>{weekDays[date.getDay()]}</div>
                  <div className="text-base mt-0.5">{date.getDate()}</div>
                </div>
              ))}
            </div>
            
            {/* Time Grid with 15-minute intervals */}
            <div style={{ position: 'relative' }}>
              {hours.map((hour) => (
                <div key={hour}>
                  {[0, 15, 30, 45].map(minutes => {
                    const timeString = `${hour}:${minutes.toString().padStart(2, '0')}`;
                    const isHour = minutes === 0;
                    const isHalfHour = minutes === 30;
                    
                    return (
                      <div key={timeString} 
                        style={{ 
                          display: 'grid', 
                          gridTemplateColumns: '50px repeat(7, 1fr)', 
                          gap: '4px',
                          borderTop: isHour ? '2px solid #D7D7DB' : (isHalfHour ? '1px solid #E0E0E0' : '1px dashed #F0F0F0'),
                          minHeight: '32px',
                          paddingTop: '2px',
                          paddingBottom: '2px'
                        }} 
                        className="relative">
                        <div className="text-[11px] font-medium pr-2 flex items-start justify-end pt-1"
                          style={{ color: isHour ? '#272030' : '#9E9E9E' }}>
                          {(isHour || isHalfHour) && timeString}
                        </div>
                        
                        {[0,1,2,3,4,5,6].map(dayIndex => {
                          const slotDate = weekDates[dayIndex];
                          const slotDateTime = new Date(slotDate);
                          slotDateTime.setHours(hour, minutes, 0, 0);
                          
                          // Find sessions that START in this exact time slot
                          const sessionsInSlot = sessions.filter(s => {
                            const sessionDate = new Date(s.datetime);
                            return sessionDate.getTime() === slotDateTime.getTime();
                          });
                          
                          const isAvailable = sessionsInSlot.length === 0 && 
                            isTimeAvailable(slotDateTime, 30);
                          
                          return (
                            <div key={dayIndex} 
                              style={{
                                background: isAvailable ? (isHour ? '#FAFAFA' : '#FDFDFD') : '#FFFFFF',
                                border: '1px solid #E5E5E5',
                                borderRadius: '4px',
                                position: 'relative',
                                minHeight: '32px'
                              }}
                              className={isAvailable ? 'cursor-pointer hover:bg-blue-50 hover:border-blue-300 transition-colors' : ''}
                              onClick={() => isAvailable && handleQuickTimeSlotClick(slotDateTime)}>
                              
                              {sessionsInSlot.map((session) => {
                                const client = clients.find(c => c.id === session.clientId);
                                const serviceType = getServiceType(session.serviceTypeId);
                                const duration = serviceType?.duration || 30;
                                const isSoftHold = session.status === 'soft-hold';
                                const isCheckedIn = session.status === 'checked-in';
                                
                                // Calculate height in pixels: 32px per 15-min block
                                const heightBlocks = Math.ceil(duration / 15);
                                const heightPx = heightBlocks * 32;
                                
                                return (
                                  <div key={session.id}
                                    onClick={(e) => { e.stopPropagation(); handleSessionClick(session); }}
                                    style={{ 
                                      position: 'absolute',
                                      top: '2px',
                                      left: '2px',
                                      right: '2px',
                                      height: `${heightPx - 8}px`,
                                      background: isSoftHold 
                                        ? `repeating-linear-gradient(45deg, ${client?.color}40, ${client?.color}40 10px, ${client?.color}20 10px, ${client?.color}20 20px)`
                                        : client?.color || '#12229D',
                                      border: isSoftHold ? `2px dashed ${client?.color}` : 'none',
                                      zIndex: 10,
                                      boxShadow: '0 1px 3px rgba(0,0,0,0.12)'
                                    }}
                                    className="rounded p-1.5 text-white overflow-hidden cursor-pointer hover:shadow-lg transition-shadow">
                                    <div className="font-semibold text-[10px] leading-tight mb-0.5">
                                      {client?.name.split(' ')[0]}
                                    </div>
                                    <div className="text-[8px] opacity-90">{duration}min</div>
                                    {duration >= 45 && (
                                      <div className="text-[7px] opacity-75 mt-0.5">{serviceType?.name.substring(0, 12)}</div>
                                    )}
                                    {isSoftHold && (
                                      <div className="absolute top-0.5 right-0.5 text-[8px] bg-orange-500 px-1 rounded font-semibold">
                                        Hold
                                      </div>
                                    )}
                                    {isCheckedIn && (
                                      <div className="absolute top-0.5 right-0.5 text-[8px] bg-green-500 px-1 rounded font-semibold">
                                        ✓
                                      </div>
                                    )}
                                    {client && client.credits < (serviceType?.creditsRequired || 1) && (
                                      <div className="absolute bottom-0.5 right-0.5 w-2 h-2 bg-red-500 rounded-full border border-white" />
                                    )}
                                  </div>
                                );
                              })}
                              
                              {isAvailable && isHour && (
                                <div className="absolute top-1/2 left-1/2 text-base opacity-15 pointer-events-none font-bold" 
                                  style={{ transform: 'translate(-50%, -50%)', color: '#12229D' }}>
                                  +
                                </div>
                              )}
                            </div>
                          );
                        })}
                      </div>
                    );
                  })}
                </div>
              ))}
            </div>
          </div>
        </div>
      )}
      
      {/* Floating Action Button */}
      <button
        onClick={() => {
          const now = new Date(currentDate);
          now.setHours(9, 0, 0, 0);
          setSelectedSlot(now);
          setCustomTime({ hour: 9, minute: 0 });
          setSelectedServiceType(serviceTypes[0]);
          setShowBookingModal(true);
        }}
        style={{
          position: 'fixed',
          bottom: '24px',
          right: '24px',
          width: '60px',
          height: '60px',
          borderRadius: '50%',
          background: 'linear-gradient(135deg, #12229D 0%, #A71075 100%)',
          border: 'none',
          boxShadow: '0 4px 16px rgba(18, 34, 157, 0.5)',
          zIndex: 1000
        }}
        className="text-white text-2xl cursor-pointer flex items-center justify-center font-bold">
        +
      </button>
      
      {/* Custom Time Picker Modal */}
      {showTimeCustomizer && (
        <>
          <div style={{
            position: 'fixed',
            inset: 0,
            background: 'rgba(39, 32, 48, 0.7)',
            zIndex: 2100,
            backdropFilter: 'blur(2px)'
          }} onClick={() => setShowTimeCustomizer(false)} />
          <div style={{
            position: 'fixed',
            bottom: 0,
            left: 0,
            right: 0,
            maxWidth: '480px',
            margin: '0 auto',
            zIndex: 2101
          }} className="bg-white rounded-t-3xl p-5 shadow-2xl">
            <div className="w-10 h-1 rounded-full mx-auto mb-4" style={{ background: '#D7D7DB' }} />
            <h3 className="text-xl font-bold mb-4" style={{ color: '#272030' }}>
              Set Custom Time
            </h3>
            
            <div className="grid grid-cols-2 gap-4 mb-4">
              <div>
                <label className="text-xs font-semibold mb-2 block" style={{ color: '#272030' }}>
                  Hour
                </label>
                <select 
                  value={customTime.hour}
                  onChange={(e) => setCustomTime({...customTime, hour: parseInt(e.target.value)})}
                  style={{ borderColor: '#D7D7DB' }}
                  className="w-full p-3 border-2 rounded-xl text-sm font-semibold">
                  {hours.map(h => (
                    <option key={h} value={h}>{h}:00</option>
                  ))}
                </select>
              </div>
              <div>
                <label className="text-xs font-semibold mb-2 block" style={{ color: '#272030' }}>
                  Minute
                </label>
                <select 
                  value={customTime.minute}
                  onChange={(e) => setCustomTime({...customTime, minute: parseInt(e.target.value)})}
                  style={{ borderColor: '#D7D7DB' }}
                  className="w-full p-3 border-2 rounded-xl text-sm font-semibold">
                  <option value={0}>:00</option>
                  <option value={15}>:15</option>
                  <option value={30}>:30</option>
                  <option value={45}>:45</option>
                </select>
              </div>
            </div>
            
            <div className="flex gap-2">
              <button
                onClick={() => setShowTimeCustomizer(false)}
                style={{ background: '#D7D7DB', color: '#272030' }}
                className="flex-1 p-3 rounded-xl font-semibold hover:opacity-80">
                Cancel
              </button>
              <button
                onClick={applyCustomTime}
                style={{ background: '#12229D' }}
                className="flex-1 p-3 text-white rounded-xl font-semibold hover:opacity-90">
                Apply
              </button>
            </div>
          </div>
        </>
      )}
      
      {/* Book Session Modal - Enhanced with Service Type Selection */}
      {showBookingModal && (
        <>
          <div style={{
            position: 'fixed',
            inset: 0,
            background: 'rgba(39, 32, 48, 0.7)',
            zIndex: 2000,
            backdropFilter: 'blur(2px)'
          }} onClick={() => setShowBookingModal(false)} />
          <div style={{
            position: 'fixed',
            bottom: 0,
            left: 0,
            right: 0,
            maxWidth: '480px',
            margin: '0 auto',
            zIndex: 2001,
            maxHeight: '85vh',
            overflowY: 'auto'
          }} className="bg-white rounded-t-3xl p-5 shadow-2xl">
            <div className="w-10 h-1 rounded-full mx-auto mb-4" style={{ background: '#D7D7DB' }} />
            <h3 className="text-xl font-bold mb-1" style={{ color: '#272030' }}>Book Session</h3>
            <div className="flex items-center gap-2 mb-4">
              <p className="text-sm text-gray-600">
                {selectedSlot && formatTime(selectedSlot)}
              </p>
              <button 
                onClick={handleCustomTimeClick}
                className="text-xs px-2 py-1 rounded bg-gray-100 hover:bg-gray-200">
                Change
              </button>
            </div>
            
            {/* Service Type Selection */}
            <div className="mb-4">
              <div className="text-xs font-semibold mb-2" style={{ color: '#272030' }}>
                Session Type
              </div>
              <div className="grid grid-cols-1 gap-2">
                {serviceTypes.map(service => (
                  <button
                    key={service.id}
                    onClick={() => setSelectedServiceType(service)}
                    style={{
                      background: selectedServiceType?.id === service.id ? service.color : '#F5F5F5',
                      color: selectedServiceType?.id === service.id ? 'white' : '#272030',
                      borderColor: selectedServiceType?.id === service.id ? service.color : '#D7D7DB'
                    }}
                    className="border-2 rounded-xl p-3 text-left hover:opacity-90 transition-all">
                    <div className="flex items-center justify-between">
                      <div>
                        <div className="font-semibold text-sm">{service.name}</div>
                        <div className="text-xs opacity-75">{service.duration} minutes • {service.creditsRequired} credits</div>
                      </div>
                      {selectedServiceType?.id === service.id && (
                        <div className="text-lg">✓</div>
                      )}
                    </div>
                  </button>
                ))}
              </div>
            </div>
            
            {/* Search Client */}
            <input 
              type="text"
              placeholder="Search clients..."
              value={searchClient}
              onChange={(e) => setSearchClient(e.target.value)}
              style={{ borderColor: '#D7D7DB' }}
              className="w-full p-3 border-2 rounded-xl focus:outline-none text-sm mb-3"
            />
            
            {/* Client List */}
            <div className="space-y-2 max-h-[300px] overflow-y-auto mb-3">
              {filteredClients.map((client) => {
                const hasEnoughCredits = selectedServiceType && 
                  client.credits >= selectedServiceType.creditsRequired;
                
                return (
                  <div key={client.id} 
                    style={{ background: '#F5F5F5', borderColor: '#D7D7DB' }}
                    className="border-2 rounded-xl p-3">
                    <div className="flex items-center gap-3 mb-2">
                      <div style={{ background: client.color }} 
                        className="w-12 h-12 rounded-full flex items-center justify-center text-2xl flex-shrink-0 shadow-sm">
                        {client.avatar}
                      </div>
                      <div className="flex-1 min-w-0">
                        <div className="font-semibold" style={{ color: '#272030' }}>{client.name}</div>
                        <div className={`text-xs font-semibold ${hasEnoughCredits ? 'text-green-600' : 'text-red-600'}`}>
                          {client.credits} credits {selectedServiceType && `(need ${selectedServiceType.creditsRequired})`}
                        </div>
                      </div>
                    </div>
                    
                    {hasEnoughCredits ? (
                      <button onClick={() => bookSession(client, false)}
                        style={{ background: '#12229D' }}
                        className="w-full p-2.5 text-white rounded-lg font-semibold text-sm hover:opacity-90">
                        ✓ Confirm Booking
                      </button>
                    ) : (
                      <div className="grid grid-cols-2 gap-2">
                        <button onClick={() => bookSession(client, true)}
                          style={{ background: '#FFF3E0', color: '#F4B324' }}
                          className="p-2.5 rounded-lg font-semibold text-xs hover:opacity-80">
                          ⏱ Soft Hold
                        </button>
                        <button 
                          style={{ background: '#4CAF50' }}
                          className="p-2.5 text-white rounded-lg font-semibold text-xs hover:opacity-90">
                          💳 Top Up
                        </button>
                      </div>
                    )}
                  </div>
                );
              })}
            </div>
            
            <button
              onClick={() => setShowBookingModal(false)}
              style={{ background: '#D7D7DB', color: '#272030' }}
              className="w-full p-3 rounded-xl font-semibold hover:opacity-80">
              Cancel
            </button>
          </div>
        </>
      )}
      
      {/* Session Actions Modal - Similar to previous but accounts for variable durations */}
      {showSessionActions && selectedSession && (
        <>
          <div style={{
            position: 'fixed',
            inset: 0,
            background: 'rgba(39, 32, 48, 0.7)',
            zIndex: 2000,
            backdropFilter: 'blur(2px)'
          }} onClick={() => setShowSessionActions(false)} />
          <div style={{
            position: 'fixed',
            bottom: 0,
            left: 0,
            right: 0,
            maxWidth: '480px',
            margin: '0 auto',
            zIndex: 2001,
            maxHeight: '90vh',
            overflowY: 'auto'
          }} className="bg-white rounded-t-3xl p-5 shadow-2xl">
            <div className="w-10 h-1 rounded-full mx-auto mb-4" style={{ background: '#D7D7DB' }} />
            
            {/* Client Header */}
            <div className="flex items-center gap-3 mb-3 pb-3 border-b" style={{ borderColor: '#D7D7DB' }}>
              <div style={{ background: clients.find(c => c.id === selectedSession.clientId)?.color }} 
                className="w-16 h-16 rounded-full flex items-center justify-center text-3xl shadow-md">
                {clients.find(c => c.id === selectedSession.clientId)?.avatar}
              </div>
              <div className="flex-1">
                <h3 className="text-xl font-bold" style={{ color: '#272030' }}>
                  {clients.find(c => c.id === selectedSession.clientId)?.name}
                </h3>
                <div className="text-sm text-gray-600">
                  {formatTime(selectedSession.datetime)}
                </div>
              </div>
            </div>
            
            {/* Status, Service Type & Credits */}
            <div className="flex gap-2 mb-4 flex-wrap">
              {(() => {
                const statusInfo = getStatusBadge(selectedSession.status);
                const serviceType = getServiceType(selectedSession.serviceTypeId);
                const client = clients.find(c => c.id === selectedSession.clientId);
                
                return (
                  <>
                    <span style={{ background: statusInfo.bg, color: statusInfo.text }}
                      className="px-3 py-1.5 rounded-lg text-xs font-semibold">
                      {statusInfo.label}
                    </span>
                    {serviceType && (
                      <span style={{ background: '#E8EAF6', color: '#12229D' }}
                        className="px-3 py-1.5 rounded-lg text-xs font-semibold">
                        {serviceType.name} • {serviceType.duration}m
                      </span>
                    )}
                    {client && (
                      <span className={client.credits >= (serviceType?.creditsRequired || 1)
                        ? 'bg-green-100 text-green-700'
                        : 'bg-red-100 text-red-700'}
                        className="px-3 py-1.5 rounded-lg text-xs font-semibold">
                        {client.credits} credits
                      </span>
                    )}
                    {selectedSession.status === 'soft-hold' && selectedSession.holdExpiry && (
                      <span style={{ background: '#FFF3E0', color: '#F4B324' }}
                        className="px-3 py-1.5 rounded-lg text-xs font-semibold">
                        ⏱ {getTimeRemaining(selectedSession.holdExpiry)}
                      </span>
                    )}
                  </>
                );
              })()}
            </div>
            
            {/* Primary Actions */}
            {selectedSession.status !== 'checked-in' && selectedSession.status !== 'no-show' && (
              <div className="mb-3">
                <div className="text-xs font-semibold mb-2" style={{ color: '#272030' }}>Quick Actions</div>
                <div className="grid grid-cols-2 gap-2 mb-2">
                  <button 
                    onClick={() => {
                      setShowSessionActions(false);
                      setShowWorkoutSelector(true);
                    }}
                    style={{ background: '#12229D' }}
                    className="p-3 text-white rounded-xl font-semibold text-sm hover:opacity-90 flex items-center justify-center gap-2">
                    <span>▶️</span> Start
                  </button>
                  <button 
                    onClick={() => {
                      const client = clients.find(c => c.id === selectedSession.clientId);
                      if (client) window.open(`sms:${client.phone}`, '_blank');
                    }}
                    className="p-3 bg-green-600 text-white rounded-xl font-semibold text-sm hover:bg-green-700 flex items-center justify-center gap-2">
                    <span>💬</span> Message
                  </button>
                </div>
                
                {selectedSession.status === 'soft-hold' && (
                  <button 
                    style={{ background: '#E8F5E9', color: '#4CAF50' }}
                    className="w-full p-3 rounded-xl font-semibold text-sm mb-2 hover:opacity-80 flex items-center justify-center gap-2">
                    <span>💳</span> Top Up Credits
                  </button>
                )}
              </div>
            )}
            
            {/* Active Workout */}
            {selectedSession.status === 'checked-in' && selectedSession.workoutId && (
              <div className="mb-3 p-3 rounded-xl" style={{ background: '#E8EAF6' }}>
                <div className="text-xs font-semibold mb-2" style={{ color: '#12229D' }}>Active Workout</div>
                <div className="font-bold" style={{ color: '#12229D' }}>
                  {workoutTemplates.find(w => w.id === selectedSession.workoutId)?.name}
                </div>
              </div>
            )}
            
            {/* Secondary Actions */}
            <div className="space-y-2">
              <div className="grid grid-cols-3 gap-2">
                <button onClick={markLate} className="p-2.5 bg-yellow-100 text-yellow-700 rounded-lg font-semibold text-xs hover:bg-yellow-200">
                  ⏰ Late
                </button>
                <button onClick={markNoShow} className="p-2.5 bg-red-100 text-red-700 rounded-lg font-semibold text-xs hover:bg-red-200">
                  ❌ No Show
                </button>
                <button 
                  style={{ background: '#D7D7DB', color: '#272030' }}
                  className="p-2.5 rounded-lg font-semibold text-xs hover:opacity-80">
                  📅 Reschedule
                </button>
              </div>
              
              <button onClick={cancelSession} className="w-full p-3 bg-red-50 text-red-600 rounded-xl font-semibold text-sm hover:bg-red-100">
                Cancel Session
              </button>
              
              <button
                onClick={() => setShowSessionActions(false)}
                className="w-full p-3 text-gray-600 font-semibold hover:text-gray-800">
                Close
              </button>
            </div>
          </div>
        </>
      )}
      
      {/* Workout Selector - same as before */}
      {showWorkoutSelector && selectedSession && (
        <>
          <div style={{
            position: 'fixed',
            inset: 0,
            background: 'rgba(39, 32, 48, 0.7)',
            zIndex: 2100,
            backdropFilter: 'blur(2px)'
          }} onClick={() => setShowWorkoutSelector(false)} />
          <div style={{
            position: 'fixed',
            bottom: 0,
            left: 0,
            right: 0,
            maxWidth: '480px',
            margin: '0 auto',
            zIndex: 2101,
            maxHeight: '85vh',
            overflowY: 'auto'
          }} className="bg-white rounded-t-3xl p-5 shadow-2xl">
            <div className="w-10 h-1 rounded-full mx-auto mb-4" style={{ background: '#D7D7DB' }} />
            <h3 className="text-xl font-bold mb-1" style={{ color: '#272030' }}>Select Workout</h3>
            <p className="text-sm text-gray-600 mb-4">
              Choose a workout template
            </p>
            
            <div className="space-y-2 mb-3">
              {workoutTemplates.map((workout) => (
                <button
                  key={workout.id}
                  onClick={() => startSession(workout.id)}
                  style={{ background: '#F5F5F5', borderColor: '#D7D7DB' }}
                  className="w-full p-4 rounded-xl border-2 text-left hover:shadow-md transition-all">
                  <div className="font-bold mb-1" style={{ color: '#272030' }}>{workout.name}</div>
                  <div className="text-xs text-gray-600">{workout.exercises.join(' • ')}</div>
                </button>
              ))}
            </div>
            
            <button
              onClick={() => setShowWorkoutSelector(false)}
              style={{ background: '#D7D7DB', color: '#272030' }}
              className="w-full p-3 rounded-xl font-semibold hover:opacity-80">
              Cancel
            </button>
          </div>
        </>
      )}
    </div>
  );
}